---
import AdminLayout from '../../../components/admin/AdminLayout.astro';
---

<AdminLayout title="Admin Dashboard - Overview" currentPage="overview">
  <!-- Quick Stats Row -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <div id="revenue-card"></div>
    <div id="user-breakdown-card"></div>
    <div id="listings-card"></div>
    <div id="services-card"></div>
  </div>

  <!-- Email Validation Metrics -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-6">
      <div>
        <h2 class="text-2xl font-bold text-white">ðŸ“§ Email Validation System</h2>
        <p class="text-gray-400">Real-time spam prevention and email quality metrics</p>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
        <span class="text-sm text-green-400">System Active</span>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div id="email-validations-card"></div>
      <div id="email-quality-card"></div>
      <div id="spam-blocked-card"></div>
    </div>
  </div>

  <!-- Main Dashboard Grid -->
  <div class="grid lg:grid-cols-3 gap-8">
    <!-- Revenue Chart - Takes 2 columns -->
    <div class="lg:col-span-2">
      <div id="revenue-chart"></div>
    </div>

    <!-- Activity Feed - Takes 1 column -->
    <div class="lg:col-span-1">
      <div id="activity-feed"></div>
    </div>
  </div>

  <!-- Additional Insights Row -->
  <div class="grid lg:grid-cols-2 gap-8 mt-8">
    <!-- Top Performers -->
    <div class="bg-gradient-to-br from-gray-900/50 to-black/50 backdrop-blur-sm rounded-2xl border border-yellow-400/20 p-6 hover:border-yellow-400/40 transition-all duration-300">
      <div class="flex items-center justify-between mb-6">
        <div>
          <h3 class="text-lg font-semibold text-white">Top Performing Platforms</h3>
          <p class="text-sm text-gray-400">By revenue this month</p>
        </div>
        <a href="/dashboard/admin/platforms" class="text-yellow-400 hover:text-yellow-300 text-sm font-medium">
          View All â†’
        </a>
      </div>

      <div class="space-y-4">
        <div class="flex items-center justify-between p-4 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-yellow-400/20 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
              </svg>
            </div>
            <div>
              <h4 class="text-white font-medium">AI HR Compliance Platform</h4>
              <p class="text-sm text-gray-400">Enterprise HR solution</p>
            </div>
          </div>
          <div class="text-right">
            <div class="text-white font-semibold">$35,000</div>
            <div class="text-sm text-green-400">+2 sales</div>
          </div>
        </div>

        <div class="flex items-center justify-between p-4 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-blue-400/20 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
              </svg>
            </div>
            <div>
              <h4 class="text-white font-medium">Healthcare Analytics Suite</h4>
              <p class="text-sm text-gray-400">Medical data platform</p>
            </div>
          </div>
          <div class="text-right">
            <div class="text-white font-semibold">$28,500</div>
            <div class="text-sm text-green-400">+1 sale</div>
          </div>
        </div>

        <div class="flex items-center justify-between p-4 bg-gray-800/30 rounded-lg hover:bg-gray-800/50 transition-colors">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-purple-400/20 rounded-lg flex items-center justify-center">
              <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
            </div>
            <div>
              <h4 class="text-white font-medium">FinTech Trading Platform</h4>
              <p class="text-sm text-gray-400">Crypto trading solution</p>
            </div>
          </div>
          <div class="text-right">
            <div class="text-white font-semibold">$22,000</div>
            <div class="text-sm text-green-400">+1 sale</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions -->
    <div class="bg-gradient-to-br from-gray-900/50 to-black/50 backdrop-blur-sm rounded-2xl border border-yellow-400/20 p-6 hover:border-yellow-400/40 transition-all duration-300">
      <div class="mb-6">
        <h3 class="text-lg font-semibold text-white">Quick Actions</h3>
        <p class="text-sm text-gray-400">Common administrative tasks</p>
      </div>

      <div class="grid grid-cols-2 gap-4">
        <button class="group p-4 bg-yellow-400/10 border border-yellow-400/20 rounded-lg hover:bg-yellow-400/20 hover:border-yellow-400/40 transition-all duration-200">
          <div class="w-8 h-8 bg-yellow-400/20 rounded-lg flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
            <svg class="w-4 h-4 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
          <div class="text-left">
            <h4 class="text-sm font-medium text-white group-hover:text-yellow-400 transition-colors">Approve Listings</h4>
            <p class="text-xs text-gray-400">3 pending</p>
          </div>
        </button>

        <button class="group p-4 bg-green-400/10 border border-green-400/20 rounded-lg hover:bg-green-400/20 hover:border-green-400/40 transition-all duration-200">
          <div class="w-8 h-8 bg-green-400/20 rounded-lg flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
            <svg class="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
          </div>
          <div class="text-left">
            <h4 class="text-sm font-medium text-white group-hover:text-green-400 transition-colors">Process Payments</h4>
            <p class="text-xs text-gray-400">5 escrow</p>
          </div>
        </button>

        <button class="group p-4 bg-blue-400/10 border border-blue-400/20 rounded-lg hover:bg-blue-400/20 hover:border-blue-400/40 transition-all duration-200">
          <div class="w-8 h-8 bg-blue-400/20 rounded-lg flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
            <svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-5 0a4 4 0 11-8 0 4 4 0 018 0z"/>
            </svg>
          </div>
          <div class="text-left">
            <h4 class="text-sm font-medium text-white group-hover:text-blue-400 transition-colors">Support Tickets</h4>
            <p class="text-xs text-gray-400">2 urgent</p>
          </div>
        </button>

        <button class="group p-4 bg-purple-400/10 border border-purple-400/20 rounded-lg hover:bg-purple-400/20 hover:border-purple-400/40 transition-all duration-200">
          <div class="w-8 h-8 bg-purple-400/20 rounded-lg flex items-center justify-center mb-3 group-hover:scale-110 transition-transform">
            <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
            </svg>
          </div>
          <div class="text-left">
            <h4 class="text-sm font-medium text-white group-hover:text-purple-400 transition-colors">View Analytics</h4>
            <p class="text-xs text-gray-400">Full reports</p>
          </div>
        </button>
      </div>

      <!-- System Status -->
      <div class="mt-6 pt-6 border-t border-gray-700">
        <h4 class="text-sm font-medium text-white mb-3">System Status</h4>
        <div class="space-y-2">
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-400">API Services</span>
            <div class="flex items-center space-x-2">
              <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-xs text-green-400">Operational</span>
            </div>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-400">Payment Processing</span>
            <div class="flex items-center space-x-2">
              <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-xs text-green-400">Operational</span>
            </div>
          </div>
          <div class="flex items-center justify-between">
            <span class="text-sm text-gray-400">Deployment Engine</span>
            <div class="flex items-center space-x-2">
              <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-xs text-green-400">Operational</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import {
    RevenueCard,
    UsersCard,
    ListingsCard,
    ServicesCard,
    EmailValidationsCard,
    EmailQualityCard,
    SpamBlockedCard,
    UserTypeBreakdownCard
  } from '../../../components/admin/MetricCard.tsx';
  import RevenueChart from '../../../components/admin/RevenueChart.tsx';
  import ActivityFeed from '../../../components/admin/ActivityFeed.tsx';
  import { createRoot } from 'react-dom/client';
  import React from 'react';

  // Mock data for demonstration
  const mockChartData = [
    { date: '2024-01-01', revenue: 15000, transactions: 12 },
    { date: '2024-01-02', revenue: 18000, transactions: 15 },
    { date: '2024-01-03', revenue: 22000, transactions: 18 },
    { date: '2024-01-04', revenue: 19000, transactions: 16 },
    { date: '2024-01-05', revenue: 25000, transactions: 20 },
    { date: '2024-01-06', revenue: 28000, transactions: 22 },
    { date: '2024-01-07', revenue: 32000, transactions: 25 }
  ];

  // Initialize React components
  document.addEventListener('DOMContentLoaded', async () => {
    // Fetch email analytics data
    let emailData = null;
    try {
      const response = await fetch('/api/admin/email-analytics', {
        headers: { 'Authorization': 'Bearer admin-token' }
      });
      if (response.ok) {
        const result = await response.json();
        emailData = result.dashboard;
      }
    } catch (error) {
      console.error('Failed to fetch email analytics:', error);
    }

    // Render metric cards
    const revenueCardEl = document.getElementById('revenue-card');
    if (revenueCardEl) {
      const root = createRoot(revenueCardEl);
      root.render(
        React.createElement(RevenueCard, {
          value: 135000,
          trend: { value: 12.5, isPositive: true, label: 'vs last month' }
        })
      );
    }

    // Replace users card with user breakdown card
    const userBreakdownCardEl = document.getElementById('user-breakdown-card');
    if (userBreakdownCardEl && emailData) {
      const root = createRoot(userBreakdownCardEl);
      root.render(
        React.createElement(UserTypeBreakdownCard, {
          sellers: emailData.userStats?.sellers || 0,
          buyers: emailData.userStats?.buyers || 0,
          investors: emailData.userStats?.investors || 0,
          superAdmins: emailData.userStats?.superAdmins || 1,
          trend: { value: 8.3, isPositive: true, label: 'growth this month' }
        })
      );
    } else if (userBreakdownCardEl) {
      // Fallback if no data
      const root = createRoot(userBreakdownCardEl);
      root.render(
        React.createElement(UserTypeBreakdownCard, {
          sellers: 0,
          buyers: 0,
          investors: 0,
          superAdmins: 1,
          trend: { value: 0, isPositive: true, label: 'no activity yet' }
        })
      );
    }

    // Email validation metric cards
    const emailValidationsCardEl = document.getElementById('email-validations-card');
    if (emailValidationsCardEl && emailData) {
      const root = createRoot(emailValidationsCardEl);
      root.render(
        React.createElement(EmailValidationsCard, {
          value: emailData.emailMetrics?.totalValidations || 0,
          trend: { value: 100, isPositive: true, label: 'spam prevention active' }
        })
      );
    }

    const emailQualityCardEl = document.getElementById('email-quality-card');
    if (emailQualityCardEl && emailData) {
      const root = createRoot(emailQualityCardEl);
      root.render(
        React.createElement(EmailQualityCard, {
          value: emailData.emailMetrics?.averageScore || 85,
          trend: { value: 5.2, isPositive: true, label: 'quality improving' }
        })
      );
    }

    const spamBlockedCardEl = document.getElementById('spam-blocked-card');
    if (spamBlockedCardEl && emailData) {
      const root = createRoot(spamBlockedCardEl);
      root.render(
        React.createElement(SpamBlockedCard, {
          value: emailData.emailMetrics?.invalidEmails || 0,
          trend: { value: 99.8, isPositive: true, label: 'protection rate' }
        })
      );
    }

    const listingsCardEl = document.getElementById('listings-card');
    if (listingsCardEl) {
      const root = createRoot(listingsCardEl);
      root.render(
        React.createElement(ListingsCard, {
          value: 18,
          trend: { value: 15.2, isPositive: true, label: 'vs last month' }
        })
      );
    }

    const servicesCardEl = document.getElementById('services-card');
    if (servicesCardEl) {
      const root = createRoot(servicesCardEl);
      root.render(
        React.createElement(ServicesCard, {
          value: 32,
          trend: { value: 5.1, isPositive: false, label: 'vs last month' }
        })
      );
    }

    // Render revenue chart
    const revenueChartEl = document.getElementById('revenue-chart');
    if (revenueChartEl) {
      const root = createRoot(revenueChartEl);
      root.render(
        React.createElement(RevenueChart, {
          data: mockChartData,
          period: '7d',
          onPeriodChange: (period) => console.log('Period changed:', period)
        })
      );
    }

    // Render activity feed
    const activityFeedEl = document.getElementById('activity-feed');
    if (activityFeedEl) {
      const root = createRoot(activityFeedEl);
      root.render(
        React.createElement(ActivityFeed, {
          maxItems: 8,
          autoRefresh: true
        })
      );
    }
  });

  // Auto-refresh dashboard data including email analytics
  setInterval(async () => {
    try {
      // Fetch fresh analytics data
      const [analyticsResponse, emailResponse] = await Promise.all([
        fetch('/api/admin/analytics?period=30'),
        fetch('/api/admin/email-analytics', {
          headers: { 'Authorization': 'Bearer admin-token' }
        })
      ]);

      const analyticsData = await analyticsResponse.json();
      const emailData = emailResponse.ok ? await emailResponse.json() : null;

      // Update components with fresh data
      console.log('Dashboard data refreshed:', {
        analytics: analyticsData,
        email: emailData?.dashboard
      });

      // Refresh email metric cards if data available
      if (emailData?.dashboard) {
        const emailMetrics = emailData.dashboard.emailMetrics;
        const userStats = emailData.dashboard.userStats;

        // Update email validation cards with fresh data
        console.log('ðŸ“§ Email validation stats updated:', {
          totalValidations: emailMetrics?.totalValidations || 0,
          averageScore: emailMetrics?.averageScore || 0,
          invalidEmails: emailMetrics?.invalidEmails || 0,
          userBreakdown: userStats
        });
      }
    } catch (error) {
      console.error('Failed to refresh dashboard data:', error);
    }
  }, 30000); // Refresh every 30 seconds
</script>

<style>
  /* Additional dashboard-specific styles */
  .dashboard-grid {
    display: grid;
    gap: 2rem;
  }

  /* Responsive breakpoints for dashboard */
  @media (min-width: 1024px) {
    .dashboard-grid {
      grid-template-columns: 2fr 1fr;
    }
  }

  /* Smooth animations for dashboard elements */
  .dashboard-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .dashboard-card:hover {
    transform: translateY(-2px);
  }

  /* Loading state styles */
  .loading-shimmer {
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }
</style>