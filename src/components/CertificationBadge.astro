---
export interface Props {
  level: 'basic' | 'verified' | 'premium' | 'elite';
  trustScore?: number;
  features?: string[];
  size?: 'small' | 'medium' | 'large';
  showDetails?: boolean;
}

const { level, trustScore = 0, features = [], size = 'medium', showDetails = false } = Astro.props;

const badgeConfig = {
  basic: {
    icon: 'ðŸ¥‰',
    title: 'TechFlunky Basic',
    color: 'bg-amber-100 text-amber-800 border-amber-200',
    description: 'AI-validated business model'
  },
  verified: {
    icon: 'ðŸ¥ˆ',
    title: 'TechFlunky Verified',
    color: 'bg-blue-100 text-blue-800 border-blue-200',
    description: 'Comprehensive evaluation passed'
  },
  premium: {
    icon: 'ðŸ¥‡',
    title: 'TechFlunky Premium',
    color: 'bg-purple-100 text-purple-800 border-purple-200',
    description: 'Expert reviewed and validated'
  },
  elite: {
    icon: 'ðŸ’Ž',
    title: 'TechFlunky Elite',
    color: 'bg-gradient-to-r from-yellow-400 to-yellow-600 text-white border-yellow-400',
    description: 'Elite panel approved'
  }
};

const sizeClasses = {
  small: 'px-2 py-1 text-xs',
  medium: 'px-3 py-1.5 text-sm',
  large: 'px-4 py-2 text-base'
};

const config = badgeConfig[level];
---

<div class="certification-badge-container">
  <!-- Main Badge -->
  <div class={`inline-flex items-center rounded-full border ${config.color} ${sizeClasses[size]} font-medium`}>
    <span class="mr-1">{config.icon}</span>
    <span>{config.title}</span>
    {trustScore > 0 && (
      <span class="ml-2 text-xs opacity-75">
        {trustScore}% trust
      </span>
    )}
  </div>

  <!-- Detailed Information (if showDetails is true) -->
  {showDetails && (
    <div class="mt-2 p-3 bg-gray-50 rounded-lg border">
      <div class="flex items-start space-x-3">
        <div class="text-2xl">{config.icon}</div>
        <div class="flex-1">
          <h4 class="font-semibold text-gray-900">{config.title}</h4>
          <p class="text-sm text-gray-600 mb-2">{config.description}</p>

          {trustScore > 0 && (
            <div class="mb-3">
              <div class="flex items-center justify-between text-xs text-gray-500 mb-1">
                <span>Trust Score</span>
                <span>{trustScore}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div
                  class="bg-green-600 h-2 rounded-full transition-all duration-300"
                  style={`width: ${trustScore}%`}
                ></div>
              </div>
            </div>
          )}

          {features.length > 0 && (
            <div>
              <h5 class="text-xs font-medium text-gray-700 mb-1">Certified Features:</h5>
              <ul class="text-xs text-gray-600 space-y-1">
                {features.map(feature => (
                  <li class="flex items-center">
                    <svg class="w-3 h-3 text-green-500 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    {feature}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
    </div>
  )}
</div>

<!-- Hover tooltip for non-detailed view -->
{!showDetails && (
  <div class="certification-tooltip">
    <div class="tooltip-content">
      <div class="flex items-center space-x-2 mb-2">
        <span class="text-lg">{config.icon}</span>
        <span class="font-semibold">{config.title}</span>
      </div>
      <p class="text-sm text-gray-600 mb-2">{config.description}</p>

      {trustScore > 0 && (
        <div class="text-xs text-gray-500">
          Trust Score: {trustScore}%
        </div>
      )}

      {features.length > 0 && (
        <div class="mt-2">
          <div class="text-xs font-medium text-gray-700 mb-1">Verified:</div>
          <div class="text-xs text-gray-600">
            {features.slice(0, 2).join(', ')}
            {features.length > 2 && ` +${features.length - 2} more`}
          </div>
        </div>
      )}
    </div>
  </div>
)}

<style>
  .certification-badge-container {
    position: relative;
    display: inline-block;
  }

  .certification-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 8px;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s, visibility 0.2s;
    pointer-events: none;
    z-index: 10;
  }

  .certification-badge-container:hover .certification-tooltip {
    opacity: 1;
    visibility: visible;
  }

  .tooltip-content {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 12px;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    min-width: 200px;
    max-width: 300px;
  }

  .tooltip-content::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 6px solid transparent;
    border-top-color: white;
  }

  .tooltip-content::before {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 7px solid transparent;
    border-top-color: #e5e7eb;
    margin-top: 1px;
  }

  /* Elite badge special animation */
  .certification-badge-container .bg-gradient-to-r {
    animation: elite-glow 3s ease-in-out infinite;
  }

  @keyframes elite-glow {
    0%, 100% {
      box-shadow: 0 0 5px rgba(251, 191, 36, 0.3);
    }
    50% {
      box-shadow: 0 0 15px rgba(251, 191, 36, 0.6);
    }
  }
</style>

<script>
  // Add click tracking for analytics
  document.querySelectorAll('.certification-badge-container').forEach(badge => {
    badge.addEventListener('click', () => {
      const level = badge.querySelector('[class*="bg-"]')?.textContent?.toLowerCase() || 'unknown';

      // Track badge click event
      if (typeof gtag !== 'undefined') {
        gtag('event', 'certification_badge_click', {
          certification_level: level,
          event_category: 'engagement'
        });
      }
    });
  });
</script>